name: Docker

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'Dockerfile'
      - 'helloworld.py'
      - 'wsgi.py'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Dockerfile'
      - 'helloworld.py'
      - 'wsgi.py'
  
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.11.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
              type=sha
      - name: Build and export to Docker
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
      
      - name: Test
        run: |
          docker run -d -p 81:80 --rm --name flask ${{ steps.meta.outputs.tags }}
          sleep 10
          curl --write-out '%{http_code}'  --silent --output /dev/null --request GET --url 'http://localhost:81'
          docker rm -f flask
          

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xarg\s -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}


  deploy_app:
    runs-on: ubuntu-latest
    name: Deploy App
    needs: [build]
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
      - name: Deploy App
        run: |
          set -x
          az vm run-command create --name "remove_all_containers" --vm-name "myVM" --resource-group "app-singular-sturgeon" --script "docker rm -f \`docker ps --no-trunc -aq\`"
          az vm run-command create --name "docker_run" --vm-name "myVM" --resource-group "app-singular-sturgeon" --script "docker run -d -p 80:80 --name flask ${{needs.build.outputs.tag}}"
          az vm run-command show --name "remove_all_containers" --vm-name "myVM" --resource-group "app-singular-sturgeon" --expand instanceView
          az vm run-command show --name "docker_run" --vm-name "myVM" --resource-group "app-singular-sturgeon" --expand instanceView